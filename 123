
<template>
  <div class="wrapper">
    <div class="item" v-for="(item, index) of dataSource" :key="item.key">
      <el-cascader
        :value="item.value"
        :options="getOptions(index)"
        @change="handleChange($event, index)"
        @visible-change="handleVisibleChange"
        v-bind="$attrs"
        :disabled="disabled"
      />

      <template v-if="multiple">
        <i
          class="el-icon-remove-outline"
          @click="handleRemoveRow(index)"
          v-if="dataSource.length > 1 && !disabled"
        >
        </i>
        <i
          class="el-icon-circle-plus-outline"
          @click="handleAddRow"
          v-if="
            index + 1 < limit && index === dataSource.length - 1 && !disabled
          "
        >
        </i>
      </template>
    </div>
  </div>
</template>

<script>
import request from "@/utils/request";
import { cloneDeep, isNil } from "lodash";

function removeEmptyInOpts(opts) {
  const removeIdxs = [];
  for (let i = 0; i < opts.length; i++) {
    const item = opts[i];
    if (Array.isArray(item.children)) {
      if (item.children.length === 0) {
        removeIdxs.push(i);
      }
    }
  }
  let j = 0;
  removeIdxs.forEach(i => {
    opts.splice(i - j, 1);
    j++;
  });
  return opts;
}

// 过滤选中的值
function filterOptions(opts, values) {
  function r(options, id) {
    for (let i = 0; i < options.length; i++) {
      const item = options[i];

      if (item.value === id && Array.isArray(options)) {
        options.splice(i, 1);
      }

      if (Array.isArray(item.children) && item.children.length > 0) {
        r(item.children, id);
      }
    }
  }
  for (let i = 0; i < values.length; i++) {
    const item = values[i];
    // 選中 id
    const id = item[item.length - 1];
    if (isNil(id)) continue;

    r(opts, id);
  }
  return opts;
}

function pushNewRow() {
  return {
    value: [],
    key: Math.random(),
  };
}

export default {
  name: "CascaderSelect",

  inheritAttrs: false,

  props: {
    // 是否可以添加多行
    multiple: {
      type: Boolean,
      default: false,
    },
    disabled: {
      type: Boolean,
      default: false,
    },
    // 限制最大添加行数，只有 multiple 为 true 才生效
    limit: {
      type: Number,
      default: 3,
    },

    // 接口地址
    actionUrl: {
      type: String,
      default: "/takeouts/product/_get-product-list-by-clickgold",
    },

    // 值, [[id, id], [id, id]]
    value: {
      type: Array,
      default: () => [],
    },

    // 过滤值与value结构一样，只有当multiple为false时才要传
    filterValue: {
      type: Array,
      default: () => [],
    },

    // 请求参数
    queryParams: {
      type: Object,
      default: () => ({}),
    },
  },

  data() {
    return {
      options: [],
      // 数据源, 二维数组
      dataSource: [],
    };
  },

  watch: {
    value: {
      immediate: true,
      handler(val) {
        if (val.length === 0) {
          this.dataSource = [pushNewRow()];
          return;
        }

        this.dataSource = val.map((value) => ({
          key: Math.random(),
          value,
        }));
      },
    },
  },

  mounted() {
    this.getDataSource();
  },

  methods: {
    // 动态获取 options
    getOptions(index) {
      const options = filterOptions(cloneDeep(this.options), this.filterValue);
      const dataSource = cloneDeep(this.dataSource);

      for (let i = 0; i < dataSource.length; i++) {
        // 選中 id
        const id = dataSource[i].value.pop();
        if (i === index) continue;
        if (isNil(id)) continue;

        r(options, id);
      }

      function r(options, id) {
        for (let i = 0; i < options.length; i++) {
          const item = options[i];

          if (item.value === id && Array.isArray(options)) {
            options.splice(i, 1);
          }

          if (Array.isArray(item.children) && item.children.length > 0) {
            r(item.children, id);
          }
        }
      }
      return removeEmptyInOpts(options);
    },

    handleVisibleChange(visible) {
      if (!visible) {
        const dataSource = cloneDeep(this.dataSource).map((item) => {
          item.key = Math.random();
          return item;
        });
        queueMicrotask(() => {
          this.dataSource = dataSource;
          this.$forceUpdate();
        });
      }
    },

    triggerEvent() {
      // 原始值，有可能為空
      const rawIds = this.dataSource.map((item) => item.value);
      const records = [];
      let value;

      function r(options, id) {
        for (let i = 0; i < options.length; i++) {
          const item = options[i];

          if (item.value === id) {
            value = item;
            break;
          }

          if (Array.isArray(item.children) && item.children.length > 0) {
            r(item.children, id);
          }
        }
      }

      for (let i = 0; i < rawIds.length; i++) {
        value = null;
        const item = rawIds[i];
        const cId = item[item.length - 1];
        r(this.options, cId);
        records.push(value || null);
      }

      this.$emit("change", rawIds, records);
    },

    handleChange(value, index) {
      const dataSource = cloneDeep(this.dataSource);
      dataSource[index].value = value;
      queueMicrotask(() => {
        this.dataSource = dataSource;
        this.$forceUpdate();
        this.triggerEvent();
      });
    },

    // 移除行
    handleRemoveRow(index) {
      this.$delete(this.dataSource, index);
      this.$forceUpdate();
      this.triggerEvent();
    },

    // 添加行
    handleAddRow() {
      this.dataSource.push(pushNewRow());
      this.$forceUpdate();
    },

    // 获取数据源
    async getDataSource() {
      const res = await request({
        url: this.actionUrl,
        method: "post",
        data: {
          ...this.queryParams,
        },
      });

      if (!Array.isArray(res)) {
        return;
      }

      const options = [];

      // 数据源适配器
      function r(data, index) {
        for (let i = 0; i < data.length; i++) {
          const item = data[i];
          const isArr =
            Array.isArray(item.products) && item.products.length > 0;
          const params = {
            ...item,
            value: item.productClassifyId || item.productId,
            label: item.name,
            children: isArr ? [] : undefined,
          };

          if (index >= 0) {
            options[index].children.push(params);
          } else {
            options.push(params);
          }

          if (isArr) {
            r(item.products, i);
          }
        }
      }
      r(res);
      this.options = options;
    },
  },
};
</script>

<style lang="scss" scoped>
.wrapper .item:not(:nth-last-child(1)) {
  margin-bottom: 10px;
}

.wrapper /deep/.el-icon-circle-close {
  display: block !important;
}
</style>
